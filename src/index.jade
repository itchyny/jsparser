!!! 5
html(lang="ja")
  head
    meta(charset = "utf-8")
    script(src="./elements.js")
    script(src="./jsparser.js")
    script(src="./main.js")
    link(rel="stylesheet", href="./main.css")
    title JavaScript parser
  body
    #samples
      h1 A JavaScript parser in JavaScript generated by Jison
      #comment
        h3 Comment
        a(href="#") Multiline comment
        pre
          | /*
          | This is a Multiline comment.
          |   
          | 複数行のコメント
          |   
          |   
          | // ほげほげ
          |   
          |   
          | */
        a(href="#") Singleline comment
        pre
          | // Singleline comment.
          |   
          | // 一行のコメント
          |   
          | //  /*
          | //  
          | //    複数行コメントとの
          | //    合わせ
          | //  
          | //  */
      #statement
        h3 Statement
        a(href="#") If Statement
        pre
          | if (2000 &gt; 100) {
          |   console.log('＼if文／');
          | }
        a(href="#") Expression Statement
        pre
          | 10 + 20 * 30;
        a(href="#") For Statement
        pre
          | for (var i = 0; i &lt; 100; i++ ) {
          |   console.log(i);
          | }
        a(href="#") While Statement
        pre
          | var i = 100;
          | while (i &gt; 0) {
          |   i -= 1;
          | }
          | 
          | while (true) {
          |   i++;
          |   if (i &gt; 100) break;
          | }
          | 
          | LABEL: while (false) {
          | }
          | 
        a(href="#") Try Statement
        pre
          | try {
          |   throw "an error occured!!!";
          | } catch (e) {
          |   console.log(e);
          | } finally {
          |   console.log('finally...');
          | }
      #vardecl
        h3 Variable Declaration
        a(href="#") Number
        pre
          | var n = 100;
        a(href="#") String literal
        pre
          | var s = "this is a string literal";
          |   
          |   
          | var difficult_string = "hoge\\n /* not a comment // here */  hoo #! baz/^[a-z]*/  ";
          | 
        a(href="#") RegExp literal
        pre
          | var r = /^a[a-z][A-Z]\$\"\/ig;
        a(href="#") Object literal
        pre
          | var obj = {
          |   s: "string hogehoge",
          |   num: 100,
          |   arr: [ 1000, 2000, 3000 ],
          |   if: function () {
          |   },
          | };
          | 
          | var ecma5obj = {
          |   set i (n) {
          |     console.log('setter of i called with ' + n);
          |     if (n &lt; 0) 
          |       throw 'invalid value for i : ' + n.toString();
          |     this._i = n;
          |   },
          |   get i () {
          |     console.log('getter of i called');
          |     return this._i;
          |   }
          | };
        a(href="#") Assignment Expression
        pre
          | var x = 50 + 50 * Math.sin(50),
          |     y = 10,
          |     b = true;
          | 
          | 
          | b |= x &gt; 10 &amp; x &lt; 80;
          | 
          | x += 10;
          | 
          | y %= x++;
          | 
          | s = x &gt; 3 ? "Yes" : "No";
        a(href="#") Multi declaration
        pre
          | var x = 10,
          |     i = 20 + x,
          |     j = 30 + ++i,
          |     r = /^abc[a-z]*/i,
          |     foo = function () {
          |       return 100;
          |     },
          |     nu = null,
          |     self = this,
          |     b = true,
          |     a = [
          |       100,
          |       "hogehoge",
          |       /abc/i
          |     ],
          |     print = console.log,
          |     $ = jQuery,
          |     obj = new Object;
      #funcdecl
        h3 Function Declaration
        a(href="#") Function Declaration
        pre
          | function f () {
          |   return 100;
          | }
        a(href="#") Recursive Declaration
        pre
          | function fact (x) {
          |   if (x &lt; 1) return 1;
          |   else return x * fact(x - 1);
          | }
        a(href="#") Many arguments
        pre
          | function foo (s, t, u, v) {
          |   console.log(s);
          |   return u;
          | }
        a(href="#") Closure
        pre
          | var f = (function () {
          |   var i = 0;
          |   return function () {
          |     i++;
          |     console.log('i is ' + i);
          |     return i;
          |   };
          | })();
      #semicoloninsert
        h3 Semicolon Insertion
        a(href="#") Before new line
        pre
          | x = 10
          | y = 20
          | z = 30
        a(href="#") Before }
        pre
          | if (this) { console.log(100) };
          | f = function (x) { return x * x };
        a(href="#") Return statement
        pre
          | function f () {
          |   return
          |     1000;
          | }
        a(href="#") Break statement
        pre 
          | i = 100;
          | W: while (true) {
          |   if (!i--) break
          |   W;
          | }
    textarea(id="prg", rows="30", cols="70")
       /*
         jison によって作られたJavaScriptのパーサーです
         適当にJavaScriptのコードを打ち込んでください
       */
    textarea(id="result", rows="30", cols="70")
    #semicount semicolon insertion:

